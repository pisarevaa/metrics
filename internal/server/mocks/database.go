// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/database.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	server "github.com/pisarevaa/metrics/internal/server"
)

// MockMetricsModel is a mock of MetricsModel interface.
type MockMetricsModel struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsModelMockRecorder
}

// MockMetricsModelMockRecorder is the mock recorder for MockMetricsModel.
type MockMetricsModelMockRecorder struct {
	mock *MockMetricsModel
}

// NewMockMetricsModel creates a new mock instance.
func NewMockMetricsModel(ctrl *gomock.Controller) *MockMetricsModel {
	mock := &MockMetricsModel{ctrl: ctrl}
	mock.recorder = &MockMetricsModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsModel) EXPECT() *MockMetricsModelMockRecorder {
	return m.recorder
}

// InsertRowIntoDB mocks base method.
func (m *MockMetricsModel) InsertRowIntoDB(ctx context.Context, metric server.Metrics, now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRowIntoDB", ctx, metric, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRowIntoDB indicates an expected call of InsertRowIntoDB.
func (mr *MockMetricsModelMockRecorder) InsertRowIntoDB(ctx, metric, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRowIntoDB", reflect.TypeOf((*MockMetricsModel)(nil).InsertRowIntoDB), ctx, metric, now)
}

// InsertRowsIntoDB mocks base method.
func (m *MockMetricsModel) InsertRowsIntoDB(ctx context.Context, metrics []server.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRowsIntoDB", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRowsIntoDB indicates an expected call of InsertRowsIntoDB.
func (mr *MockMetricsModelMockRecorder) InsertRowsIntoDB(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRowsIntoDB", reflect.TypeOf((*MockMetricsModel)(nil).InsertRowsIntoDB), ctx, metrics)
}

// InsertRowsIntoDBWithRetry mocks base method.
func (m *MockMetricsModel) InsertRowsIntoDBWithRetry(ctx context.Context, metrics []server.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRowsIntoDBWithRetry", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRowsIntoDBWithRetry indicates an expected call of InsertRowsIntoDBWithRetry.
func (mr *MockMetricsModelMockRecorder) InsertRowsIntoDBWithRetry(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRowsIntoDBWithRetry", reflect.TypeOf((*MockMetricsModel)(nil).InsertRowsIntoDBWithRetry), ctx, metrics)
}

// IsExist mocks base method.
func (m *MockMetricsModel) IsExist() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExist indicates an expected call of IsExist.
func (mr *MockMetricsModelMockRecorder) IsExist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockMetricsModel)(nil).IsExist))
}

// Ping mocks base method.
func (m *MockMetricsModel) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockMetricsModelMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMetricsModel)(nil).Ping), ctx)
}

// RestoreMetricsFromDB mocks base method.
func (m *MockMetricsModel) RestoreMetricsFromDB(storage *server.MemStorage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreMetricsFromDB", storage)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreMetricsFromDB indicates an expected call of RestoreMetricsFromDB.
func (mr *MockMetricsModelMockRecorder) RestoreMetricsFromDB(storage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreMetricsFromDB", reflect.TypeOf((*MockMetricsModel)(nil).RestoreMetricsFromDB), storage)
}
