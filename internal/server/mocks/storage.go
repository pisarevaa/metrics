// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/storage/types.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/pisarevaa/metrics/internal/server/storage"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorage) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// GetAllMetrics mocks base method.
func (m *MockStorage) GetAllMetrics(ctx context.Context) ([]storage.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics", ctx)
	ret0, _ := ret[0].([]storage.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockStorageMockRecorder) GetAllMetrics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockStorage)(nil).GetAllMetrics), ctx)
}

// GetMetric mocks base method.
func (m *MockStorage) GetMetric(ctx context.Context, name string) (storage.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", ctx, name)
	ret0, _ := ret[0].(storage.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockStorageMockRecorder) GetMetric(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockStorage)(nil).GetMetric), ctx, name)
}

// Ping mocks base method.
func (m *MockStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorage)(nil).Ping), ctx)
}

// StoreMetric mocks base method.
func (m *MockStorage) StoreMetric(ctx context.Context, metric storage.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMetric", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMetric indicates an expected call of StoreMetric.
func (mr *MockStorageMockRecorder) StoreMetric(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMetric", reflect.TypeOf((*MockStorage)(nil).StoreMetric), ctx, metric)
}

// StoreMetrics mocks base method.
func (m *MockStorage) StoreMetrics(ctx context.Context, metrics []storage.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMetrics", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMetrics indicates an expected call of StoreMetrics.
func (mr *MockStorageMockRecorder) StoreMetrics(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMetrics", reflect.TypeOf((*MockStorage)(nil).StoreMetrics), ctx, metrics)
}
